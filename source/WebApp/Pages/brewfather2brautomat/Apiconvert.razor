@page "/brewfather2brautomat/apiconvert"

@using JensBrand.Brewfather2Brautomat.Library.Converter
@using BlazorDownloadFile
@using System.Text
@inject IBlazorDownloadFileService BlazorDownloadFileService

<PageTitle>Brewfather API-Konverter</PageTitle>

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Brewfather Rezept per API abrufen und umwandeln</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudText>Dieses Tool ruft ein Rezept von <MudLink href="https://web.brewfather.app/" Target="_blank">Brewfather</MudLink> über die API ab und wandelt sie in ein Format, das von der Brausteuerung <MudLink href="https://github.com/InnuendoPi/Brautomat" Target="_blank">Brautomat</MudLink> gelesen werden kann.</MudText>
        <br/>
        <MudText>
            Bitte wählen Sie eine Brewfather-Rezept aus, das Ergebnis wird Ihnen dann zum Download angeboten.
        </MudText>
        <br/>
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudTextField T="string" Variant="Variant.Outlined" Label="Username"></MudTextField>
            <MudText>Hier fehlt noch das Steuerelement zur Auswahl des Rezeptes :-(</MudText>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="ProcessRecipe"
                       StartIcon="@Icons.Material.Filled.CloudDownload">
                Rezept Konvertieren
            </MudButton>
            <br/>
        </MudStack>
        <MudTextField T="string" Label="Log" Variant="Variant.Outlined" Text="@logText" Lines="15"/>
    </MudCardContent>
</MudCard>


@code {

    private string userName;
    private string apiKey;

    private string logText;

    private async Task ProcessRecipe()
    {
        var sb = new StringBuilder();
    //     sb.AppendLine($"Rufe Rezept ab: {file.Name}");
    //     logText = sb.ToString();
    //     
    //     
    //     var fileName = Path.ChangeExtension(file.Name, "brautomat.json");
    //
    //     sb.AppendLine($"Ausgabedatei {fileName}");
    //     logText = sb.ToString();
    //
    //     try
    //     {
    //         using var inputStream = file.OpenReadStream();
    //         using var outputStream = new MemoryStream();
    //
    //         sb.AppendLine("Konvertiere ...");
    //         logText = sb.ToString();
    //         
    //         await Converter.Convert(inputStream, outputStream);
    //
    //         sb.AppendLine("Initiiere Download");
    //         logText = sb.ToString();
    //         
    //         outputStream.Seek(0, SeekOrigin.Begin);
    //         await BlazorDownloadFileService.DownloadFile(fileName, outputStream, "application/octet-stream");
    //
    //         sb.AppendLine("Fertig!");
    //         logText = sb.ToString();
    //     }
    //     catch (Exception e)
    //     {
    //         sb.AppendLine();
    //         sb.AppendLine();
    //         sb.AppendLine(e.ToString());
    //         logText = sb.ToString();
    //     }
    }

}